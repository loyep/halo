// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum ArticleStatus {
  PUBLISHED
  PRIVATE
  PASSWORD
  DRAFT
}

model Article {
  id      Int     @id @default(autoincrement())
  title   String
  public  Boolean @default(false)
  slug    String  @unique
  image   String
  excerpt String
  meta    Json?
  cover   String

  browseCount   Int @db.UnsignedInt
  commentsCount Int @db.UnsignedInt
  likesCount    Int @db.UnsignedInt

  /// 评论
  comments    Comment[]
  /// 文章
  content     Content?
  /// 关联用户
  userId      Int
  user        User?            @relation(fields: [userId], references: [id])
  /// 分类
  categoryId  Int              @db.UnsignedInt
  category    Category?        @relation(fields: [categoryId], references: [id])
  tags        TagsOnArticles[]
  favoritings Favorite[]
  likes       Like[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("articles")
}

model User {
  id          Int        @id @default(autoincrement())
  email       String?    @unique
  name        String
  slug        String     @unique
  /// 链接
  url         String?
  meta        Json?
  cover       String?
  bio         String?
  description String?
  mobile      String?
  openid      String?
  password    String
  loggedAt    DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deleteAt    DateTime?
  articles    Article[]
  comments    Comment[]
  favorites   Favorite[]
  likes       Like[]

  @@map("users")
}

model Tag {
  id        Int              @id @default(autoincrement())
  slug      String           @unique
  articles  TagsOnArticles[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("tags")
}

model Category {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  articles    Article[]
  slug        String    @unique
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Topic {
  id Int @id @default(autoincrement())

  @@map("topics")
}

model Setting {
  id Int @id @default(autoincrement())

  @@map("settings")
}

model Comment {
  id        Int      @id @default(autoincrement())
  articleId Int
  article   Article? @relation(fields: [articleId], references: [id])

  userId    Int
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Favorite {
  id Int @id @default(autoincrement())

  userId    Int
  articleId Int
  user      User?    @relation(fields: [userId], references: [id])
  article   Article? @relation(fields: [articleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("favorites")
}

model Content {
  id        Int      @id @default(autoincrement())
  articleId Int
  article   Article? @relation(fields: [articleId], references: [id])
  html      String?
  markdown  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contents")
}

model Collection {

  id Int @id @default(autoincrement())

  @@map("collections")
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  articleId Int
  user      User?    @relation(fields: [userId], references: [id])
  article   Article? @relation(fields: [articleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("likes")
}

model Media {

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("medias")
}

model Menu {

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("menus")
}

model Role {

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roles")
}

model Permission {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("permissions")
}

model TagsOnArticles {
  article   Article @relation(fields: [articleId], references: [id])
  articleId Int
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([articleId, tagId])
  @@map("tags_on_articles")
}
